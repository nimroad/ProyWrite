Esto es para ver como funciona git.

Curso Pĺatzi

Video "Crear un repositorio de GIt y haz gtu primer commit"

Comandos aprendidos
git init
	Inicializa GIt en la carpeta indicada
git status
	Muestra el estado de los archivos
git add nombre-archivo.extensión
	Agrega el archivo a cache, pero aun no lo pasa al repositorio. 
	Siempre al realizar cambios al archivo, antes de hacer commit hay que hacer add
git add .
	Agrega todos los archivos en la carpeta
git rm 
	Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones.
	Debe utilizarse con uno de los siguientes flags:
	--cached nombre-archivo.extensión
	Remueve el archivo de la cache. Sin --cached no se quita el archivo del Staging (RAM)
	--force nombre-archivo.extensión
	Elimina los archivos de Git y del Disco Duro- Git siempre guarda todo, por lo que podemos acceder al 
	registro de la existencia de los archivos, de modo que podremos recuperarlos si es
	necesario (pero debemos usar comandos más avanzados)
git reset
	Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja
	ir , mirar, pasear y volver. Con  git reset  volvemos al pasado sin la posibilidad de volver
	al futuro. Borramos la historia y la debemos sobreescribir. NO HAY VUELTA ATRAS.
	
	Este comando es muy peligroso y debemos usarlo solo en caso de emergencia.

	Debe utilizarse con uno de los siguientes flags:
	--soft
	Borramos todo el historial y los registros de GIt pero guardamos los cambios que 
	tengamos en Staging, asi podemos actualizar las últimas actualizaciones a un nuevo commit.
	--hard
	Borra Todo. Toda la información de los commits y del área de staging se borra del
	historial. 
	
	git reset HEAD
	Este es el comando para sacar archivos del área de Staging. NO para borrarlos, solo
	para que los últimos cambios de estos archivos no se envíen al último commit.	
git checkout
	Te permite regresar a una versión anterior pero no se cambia en master. Por lo que si se quiere usar esa version anterior se debe posteriormente aplicar git add y commit.
	Si no se desea el cambio, solo se debe hacer git commit master y se regresa a la ultima versión guardada en master.
	Si no se hace ninguna de las dos opciones anteriores, el sistema se desenlaza de la versión master la siguiente conexión y saldrá el mensaje git head desacoplada o git head detached 
	y es necesario hacer git checkout master para restablecerla. 
git config
	Muestra todos los comandos disponibles con git
git config --list
	Muestra la configuración actual de Git
git config --list --show-origin
	Muestra la configuración actual de Git y ubicación en carpetas
git config --global user.name "nombre-usuario"
	Asigna el usuario dueño del repositorio
git config --global user.email "usuario@correo.com"
	Asigna el e-mail del dueño del repositorio
git commit - m "Texto"
	Carga el archivo(s) al repositorio. Aunque se puede enviar solo como git commit,
	la buena practica es poner un mensaje acerca de los cambios ocurridos.
	
	con git commit -am , permite saltarse la linea de add y solo funciona con archivos ya guardados previamente no nuevos.
git log nombre-archivo.extensión
	Muestra la historia de versiones del archivo.
	Cuando aparece la palabra END, es necesario escribir q para salir
	con --stat te permite ver estadisticas de cambios por archivo
git show
	Muestra los cambios realizados entre la versión actual y la anterior
git diff version1 version2
	Muestra los cambios entre versiones. El color rojo es para la version1 y el color
	verde es para la version2

git clone url
	Trae copia de master de un servidor remoto al repositorio local.
git push
	Envia info del repositorio local al repositorio remoto
git fetch
	Trae los archivos modificados en el repositorio remoto sin modificar los archivos del directorio de trabajo local.
git merge
	Fusiona los archivos traidos con git fetch y reemplaza los archivos en el directorio de trabajo local.
git pull
	Realiza la función de fetch y merge

git branch
	Se crea una rama alterna a master.
	Para moverse a la nueva rama se debe hacer git checkout nombreRama
	Para regresar al master con git checkout master

git branch -m master main
	Cambia el nombre de master por main, para adecuarse a Github

git remote add origin "Direccion https"
	Sirve para conectar un repositorio remoto
	Para cambiar el directorio de origin se utiliza git remote set-url <remote_name> <remote_url>
	donde remote-name generalmente es origin y remote_url la nueva dirección del servidor remoto  
git remote
	Te permite ver el servidor remoto conectado
git remote -v
	Te permite ver las opciones de acciones con el servidor remoto

git push origin master:main
	Se utiliza datos para enviar al servidor. Anteriormente solo se utilizaba master, pero por cambio en GItHub, ahora se cambio por main, con master:main se especifica que la 
	rama master local va a la rama main remoto. Si ya se cambió el nombre del directorio seria solo git push origin main

